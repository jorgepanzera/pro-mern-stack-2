{"version":3,"file":"App.js","names":["dateRegex","RegExp","jsonDateReviver","key","value","test","Date","IssueFilter","React","Component","IssueRow","props","state","issue","console","log","id","status","owner","created","toDateString","due","issue_title","IssueTable","issuesRows","issues","map","tableStyle","tableClass","IssueAdd","event","preventDefault","form","document","forms","namedItem","title","createIssue","handleSubmit","bind","IssueList","requestOptions","method","redirect","fetch","response","text","body","result","JSON","parse","setState","Error","headers","stringify","loadData","IsFormFieldElement","element","request","request_url","config","ReactDOM","render","createElement","getElementById"],"sources":["../src/App.tsx"],"sourcesContent":["interface Issue {\r\n  id?: number;\r\n  status: string;\r\n  owner: string;\r\n  effort?: number;\r\n  created?: Date;\r\n  due?: Date;\r\n  issue_title: string;\r\n}\r\n\r\nconst dateRegex = new RegExp(\"^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\");\r\n\r\nfunction jsonDateReviver(key: any, value: any) {\r\n  if (dateRegex.test(value)) return new Date(value);\r\n  return value;\r\n}\r\n\r\n// Array de issues, simulando un fetch de una API o db\r\n/*\r\nconst initialIssues = [\r\n  {\r\n    id: 1,\r\n    status: \"New\",\r\n    owner: \"Ravan\",\r\n    effort: 5,\r\n    created: new Date(\"2018-08-15\"),\r\n    due: undefined,\r\n    issue_title: \"Error in console when clicking Add\",\r\n  },\r\n  {\r\n    id: 2,\r\n    status: \"Assigned\",\r\n    owner: \"Eddie\",\r\n    effort: 14,\r\n    created: new Date(\"2018-08-16\"),\r\n    due: new Date(\"2018-08-30\"),\r\n    issue_title: \"Missing bottom border on panel\",\r\n  },\r\n  {\r\n    id: 3,\r\n    status: \"Ready\",\r\n    owner: \"Sofi\",\r\n    effort: 33,\r\n    created: new Date(\"2023-09-27\"),\r\n    due: new Date(\"2023-10-30\"),\r\n    issue_title: \"Read all book in English\",\r\n  },\r\n];\r\n*/\r\n\r\n// Definir props y state para cada componente\r\ntype IssueFilterProps = {};\r\n\r\ntype IssueFilterState = {};\r\n\r\nclass IssueFilter extends React.Component<{}, {}> {\r\n  render() {\r\n    return <div>This is a placeholder for the issue filter.</div>;\r\n  }\r\n}\r\n\r\ntype IssueRowProps = { issue: Issue };\r\n\r\ntype IssueRowState = {};\r\n\r\nfunction IssueRow(props: IssueRowProps, state: IssueRowState) {\r\n  const issue = props.issue;\r\n\r\n  console.log(`Rendering issue ${issue.id}`);\r\n  return (\r\n    <tr>\r\n      <td> {issue.id} </td>\r\n      <td> {issue.status} </td>\r\n      <td> {issue.owner} </td>\r\n      <td> {issue.created?.toDateString()} </td>\r\n      <td> {issue.due ? issue.due.toDateString() : \"\"} </td>\r\n      <td> {issue.issue_title} </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\ntype IssueTableProps = {\r\n  issues: Issue[];\r\n  tableStyle: React.CSSProperties;\r\n  tableClass:string,\r\n};\r\n\r\ntype IssueTableState = {};\r\n\r\nfunction IssueTable(props: IssueTableProps, state: IssueTableState) {\r\n  // Iterar con map en el array de issues del state, key para unique id de cada fila\r\n  //console.log(props.issues);\r\n  const issuesRows = props.issues.map((issue) => (\r\n    <IssueRow key={issue.id} issue={issue} />\r\n  ));\r\n  const tableStyle = props.tableStyle;\r\n  const tableClass = props.tableClass;\r\n\r\n  return (\r\n    <table className={tableClass} style={tableStyle}>\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>Status</th>\r\n          <th>Owner</th>\r\n          <th>Created Date</th>\r\n          <th>Due Date</th>\r\n          <th>Title</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{issuesRows}</tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\ntype IssueAddProps = { createIssue(issue: Issue): void };\r\n\r\ntype IssueAddState = {};\r\n\r\nclass IssueAdd extends React.Component<IssueAddProps, IssueAddState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    //console.log(event.currentTarget);\r\n\r\n    const form = document.forms.namedItem(\"IssueSubmit\") as HTMLFormElement;\r\n    //const form = event.currentTarget;\r\n\r\n    let owner: string = form.owner?.value;\r\n    let title: string = form.issue_title?.value;\r\n\r\n    const issue: Issue = {\r\n      owner: form.owner?.value,\r\n      issue_title: form.issue_title?.value,\r\n      status: \"New\",\r\n    };\r\n    this.props.createIssue(issue);\r\n    form.owner.value = \"\";\r\n    form.issue_title.value = \"\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form name=\"IssueSubmit\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" name=\"owner\" placeholder=\"Owner\" />\r\n        <input type=\"text\" name=\"issue_title\" placeholder=\"Title\" />\r\n        <button>Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// clase que usa las otras 3 en un Fragment\r\n\r\ntype IssueListProps = {};\r\n\r\ntype IssueListState = {\r\n  issues: Issue[];\r\n};\r\n\r\nclass IssueList extends React.Component<IssueListProps, IssueListState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { issues: [] };\r\n    this.createIssue = this.createIssue.bind(this); // para poder usarlo en child elements, y que this siga apuntando a IssueList\r\n  }\r\n\r\n  /*\r\n  async loadData() {\r\n    // Aca va el fetch a la api GET ALL cuando exista\r\n    try {\r\n      const data = await request(\"http://localhost:3000/issues\", {\r\n        method: \"GET\",\r\n        headers: {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': 'http://localhost:3000' },\r\n      });\r\n\r\n      if (data) {\r\n        this.setState({ issues: data as Issue[] });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }*/\r\n\r\n  async loadData() {\r\n    let requestOptions: RequestInit = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    // consumir la api utilizando la libreria fetch\r\n    try {\r\n      let response = await fetch(\r\n        \"http://localhost:3000/issues\",\r\n        requestOptions\r\n      );\r\n      let body = await response.text();\r\n      //console.log(body);\r\n      let result = JSON.parse(body, jsonDateReviver);\r\n      //console.log(result);\r\n      if (result) {\r\n        this.setState({ issues: result?.issues as Issue[] });\r\n      }\r\n     /*\r\n     let data = await request(\"http://localhost:3000/issues\", requestOptions)\r\n      if (data) {\r\n        //this.setState({ issues: result?.issues as Issue[] });\r\n        this.setState({ issues: data?.issues as Issue[] });\r\n      }\r\n      */\r\n    } catch (err) {\r\n      throw new Error(`Error loadData/GetAllIssues : ${err}`);\r\n    }\r\n  }\r\n\r\n  async createIssue(issue: Issue) {\r\n    /*\r\n    issue.id = this.state.issues.length + 1;\r\n    issue.created = new Date();\r\n    const newIssueList = this.state.issues.slice();\r\n    newIssueList.push(issue);\r\n    this.setState({ issues: newIssueList });\r\n    */\r\n    let requestOptions: RequestInit = {method: \"POST\", headers: {'Content-Type': 'application/json', }, body: JSON.stringify(issue) };\r\n    try {\r\n      let response = await fetch(\"http://localhost:3000/issue/create\", requestOptions );\r\n      let body = await response.text();\r\n      console.log(body);\r\n      let result = JSON.parse(body, jsonDateReviver);\r\n      console.log(result);\r\n      if (result) {\r\n        await this.loadData();\r\n      }  \r\n    } catch(err) {\r\n      throw new Error(`Error createIssue : ${err}`);      \r\n    }\r\n  }\r\n\r\n  // cuando el componente esta pronto para render, le asigno el state inicial\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  render() {\r\n    const tableStyle: React.CSSProperties = {};\r\n      /*marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n      borderCollapse: \"collapse\",\r\n    };*/\r\n    // w-75 es 75% de tamanio relativo al parent, mx-auto la centra\r\n    const tableClass=\"table table-dark table-striped table-responsive w-75 mx-auto\"; \r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Issue Tracker</h1>\r\n        <IssueFilter />\r\n        <hr />\r\n        <IssueTable issues={this.state.issues} tableStyle={tableStyle} tableClass={tableClass} />\r\n        <hr />\r\n        <IssueAdd createIssue={this.createIssue} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction IsFormFieldElement(\r\n  element: Element\r\n): asserts element is HTMLInputElement | HTMLSelectElement | HTMLButtonElement {\r\n  // Customize this list as necessary −−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  if (!(\"value\" in element)) {\r\n    throw new Error(`Element is not a form field element`);\r\n  }\r\n}\r\n\r\n\r\nasync function request<TResponse>(\r\n  request_url: string,\r\n  config: RequestInit\r\n): Promise<TResponse> {\r\n  const response = await fetch(request_url, config);\r\n\r\n  const body = await response.text();\r\n  const result = JSON.parse(body, jsonDateReviver);\r\n  return result;\r\n}\r\n\r\n\r\n/*\r\nasync function graphQLFetch(query, variables = {}) {\r\n  try {\r\n    const response = await fetch('http://localhost:3000/graphql', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({ query, variables })\r\n    });\r\n    const body = await response.text();\r\n    const result = JSON.parse(body, jsonDateReviver);\r\n\r\n    if (result.errors) {\r\n      const error = result.errors[0];\r\n      if (error.extensions.code == 'BAD_USER_INPUT') {\r\n        const details = error.extensions.exception.errors.join('\\n ');\r\n        alert(`${error.message}:\\n ${details}`);\r\n      } else {\r\n        alert(`${error.extensions.code}: ${error.message}`);\r\n      }\r\n    }\r\n    return result.data;\r\n  } catch (e) {\r\n    alert(`Error in sending data to server: ${e.message}`);\r\n  }\r\n}\r\n*/\r\n\r\n// Crear issue list\r\nReactDOM.render(\r\n  React.createElement(IssueList),\r\n  document.getElementById(\"contents\")\r\n);\r\n"],"mappings":"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"}