{"version":3,"file":"trymongo.js","names":["url","require","MongoClient","testWithCallbacks","callback","console","log","client","useNewUrlParser","connect","err","db","collection","message","scope","host","date","location","offset","insertOne","result","close","insertedId","find","_id","toArray","docs"],"sources":["trymongo.ts"],"sourcesContent":["// local connection string en docker\r\n\r\n//const url = `mongodb://localhost:27017/`;\r\nconst url = `mongodb://0.0.0.0:27017/`;\r\n//const url = `mongodb://172.17.0.2:27017/`;\r\n\r\n// Mongodb Atlas connection string\r\n//const url = `mongodb+srv://admin:Ji9vfIASQ7NnFwN8@cluster0.30imzhm.mongodb.net/test`;\r\n\r\ninterface myCallbackType {\r\n  (myArgument: string): void;\r\n}\r\n\r\nconst { MongoClient } = require(\"mongodb\");\r\n\r\nfunction testWithCallbacks(callback: any): void {\r\n  console.log(\"\\n--- testWithCallbacks ---\");\r\n\r\n  const client = new MongoClient(url, { useNewUrlParser: true });\r\n  client.connect(function (err: any, client: any) {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n    console.log(\"Connected to MongoDB\");\r\n    const db = client.db();\r\n    const collection = db.collection(\"calls\");\r\n    const message = {\r\n      message: \"Mensaje de prueba desde trymongo.ts\",\r\n      scope: \"trymongo.ts\",\r\n      host: \"LAPTOP-GM0OSER6\",\r\n      date: \"2022-12-10T11:58:24.724+00:00\",\r\n      location: \"America/Montevideo\",\r\n      offset: \"UTC-3\",\r\n    };\r\n    collection.insertOne(message, function (err: any, result: any) {\r\n      if (err) {\r\n        client.close();\r\n        callback(err);\r\n        return;\r\n      }\r\n      console.log(\"Result of insert:\\n\", result.insertedId);\r\n      collection\r\n        .find({ _id: result.insertedId })\r\n        .toArray(function (err: any, docs: any) {\r\n          if (err) {\r\n            client.close();\r\n            callback(err);\r\n            return;\r\n          }\r\n          console.log(\"Result of find:\\n\", docs);\r\n          client.close();\r\n          callback(err);\r\n        });\r\n    });\r\n  });\r\n}\r\ntestWithCallbacks(function (err: any) {\r\n  if (err) {\r\n    console.log(err);\r\n  }\r\n});\r\n"],"mappings":";;AAAA;;AAEA;AACA,IAAMA,GAAG,6BAA6B;AACtC;;AAEA;AACA;;AAMA,eAAwBC,OAAO,CAAC,SAAS,CAAC;EAAlCC,WAAW,YAAXA,WAAW;AAEnB,SAASC,iBAAiB,CAACC,QAAa,EAAQ;EAC9CC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAE1C,IAAMC,MAAM,GAAG,IAAIL,WAAW,CAACF,GAAG,EAAE;IAAEQ,eAAe,EAAE;EAAK,CAAC,CAAC;EAC9DD,MAAM,CAACE,OAAO,CAAC,UAAUC,GAAQ,EAAEH,MAAW,EAAE;IAC9C,IAAIG,GAAG,EAAE;MACPN,QAAQ,CAACM,GAAG,CAAC;MACb;IACF;IACAL,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,IAAMK,EAAE,GAAGJ,MAAM,CAACI,EAAE,EAAE;IACtB,IAAMC,UAAU,GAAGD,EAAE,CAACC,UAAU,CAAC,OAAO,CAAC;IACzC,IAAMC,OAAO,GAAG;MACdA,OAAO,EAAE,qCAAqC;MAC9CC,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAE,iBAAiB;MACvBC,IAAI,EAAE,+BAA+B;MACrCC,QAAQ,EAAE,oBAAoB;MAC9BC,MAAM,EAAE;IACV,CAAC;IACDN,UAAU,CAACO,SAAS,CAACN,OAAO,EAAE,UAAUH,GAAQ,EAAEU,MAAW,EAAE;MAC7D,IAAIV,GAAG,EAAE;QACPH,MAAM,CAACc,KAAK,EAAE;QACdjB,QAAQ,CAACM,GAAG,CAAC;QACb;MACF;MACAL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEc,MAAM,CAACE,UAAU,CAAC;MACrDV,UAAU,CACPW,IAAI,CAAC;QAAEC,GAAG,EAAEJ,MAAM,CAACE;MAAW,CAAC,CAAC,CAChCG,OAAO,CAAC,UAAUf,GAAQ,EAAEgB,IAAS,EAAE;QACtC,IAAIhB,GAAG,EAAE;UACPH,MAAM,CAACc,KAAK,EAAE;UACdjB,QAAQ,CAACM,GAAG,CAAC;UACb;QACF;QACAL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoB,IAAI,CAAC;QACtCnB,MAAM,CAACc,KAAK,EAAE;QACdjB,QAAQ,CAACM,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACAP,iBAAiB,CAAC,UAAUO,GAAQ,EAAE;EACpC,IAAIA,GAAG,EAAE;IACPL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;EAClB;AACF,CAAC,CAAC"}