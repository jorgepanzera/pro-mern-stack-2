{"version":3,"file":"trymongo.js","names":["url","MongoClient","require","db","listCollection","database_name","collection_name","connectToDb","collection","find","toArray","issues","client","useNewUrlParser","connect","console","log","show","result"],"sources":["trymongo.ts"],"sourcesContent":["// local connection string en docker\r\n\r\n//const url = `mongodb://localhost:27017/`;\r\n//const url = `mongodb://0.0.0.0:27017/`;\r\n//const url = `mongodb://172.17.0.2:27017/`;\r\n\r\n// Mongodb Atlas connection string\r\nconst url = `mongodb+srv://admin:Ji9vfIASQ7NnFwN8@cluster0.30imzhm.mongodb.net`;\r\n\r\nconst MongoClient = require(\"mongodb\").MongoClient;\r\n\r\nlet db: any;\r\n\r\nasync function listCollection(database_name: string, collection_name: string) : Promise<any> {\r\n  await connectToDb(database_name);\r\n  const issues = await db.collection(collection_name).find({}).toArray();\r\n  return issues;\r\n  //console.log(issues);\r\n}\r\n\r\nasync function connectToDb(database_name:string) {\r\n  const client = new MongoClient(url, { useNewUrlParser: true });\r\n  await client.connect();\r\n  console.log(\"Connected to MongoDB at\", url);\r\n  db = client.db(database_name);\r\n}\r\n\r\nasync function show(database_name: string, collection_name:string) {\r\n  const result = await listCollection(database_name,collection_name) \r\n  console.log(result);\r\n}\r\n\r\nshow(\"sample_restaurants\",\"restaurants\");\r\n\r\n\r\n/*\r\nfunction testWithCallbacks(callback: any): void {\r\n  console.log(\"\\n--- testWithCallbacks ---\");\r\n\r\n  MongoClient.connect(url, function (err: any, db: any) {\r\n    if (err) throw err;\r\n    var dbo = db.db(\"my-test-db\");\r\n    console.log(\"Connected to MongoDB\");\r\n\r\n    const collection = dbo.collection(\"calls\");\r\n    const message = {\r\n      message: \"Mensaje de prueba desde trymongo.ts\",\r\n      scope: \"trymongo.ts\",\r\n      host: \"LAPTOP-GM0OSER6\",\r\n      date: \"2022-12-10T11:58:24.724+00:00\",\r\n      location: \"America/Montevideo\",\r\n      offset: \"UTC-3\",\r\n    };\r\n    collection.insertOne(message, function (err: any, result: any) {\r\n      if (err) {\r\n        MongoClient.close();\r\n        callback(err);\r\n        return;\r\n      }\r\n      console.log(\"Result of insert:\\n\", result.insertedId);\r\n      collection\r\n        .find({ _id: result.insertedId })\r\n        .toArray(function (err: any, docs: any) {\r\n          if (err) {\r\n            MongoClient.close();\r\n            callback(err);\r\n            return;\r\n          }\r\n          console.log(\"Result of find:\\n\", docs);\r\n          MongoClient.close();\r\n          callback(err);\r\n        });\r\n    });\r\n  }); // connect\r\n}\r\n\r\ntestWithCallbacks(function (err: any) {\r\n  if (err) {\r\n    console.log(err);\r\n  }\r\n});\r\n*/\r\n"],"mappings":";;;+CACA;AAAA;AAAA;AADA;;AAEA;AACA;AACA;;AAEA;AACA,IAAMA,GAAG,sEAAsE;AAE/E,IAAMC,WAAW,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,WAAW;AAElD,IAAIE,EAAO;AAAC,SAEGC,cAAc;EAAA;AAAA;AAAA;EAAA,6EAA7B,iBAA8BC,aAAqB,EAAEC,eAAuB;IAAA;IAAA;MAAA;QAAA;UAAA;UAAA,OACpEC,WAAW,CAACF,aAAa,CAAC;QAAA;UAAA;UAAA,OACXF,EAAE,CAACK,UAAU,CAACF,eAAe,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,EAAE;QAAA;UAAhEC,MAAM;UAAA,iCACLA,MAAM;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAEd;EAAA;AAAA;AAAA,SAEcJ,WAAW;EAAA;AAAA;AAAA;EAAA,0EAA1B,kBAA2BF,aAAoB;IAAA;IAAA;MAAA;QAAA;UACvCO,MAAM,GAAG,IAAIX,WAAW,CAACD,GAAG,EAAE;YAAEa,eAAe,EAAE;UAAK,CAAC,CAAC;UAAA;UAAA,OACxDD,MAAM,CAACE,OAAO,EAAE;QAAA;UACtBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEhB,GAAG,CAAC;UAC3CG,EAAE,GAAGS,MAAM,CAACT,EAAE,CAACE,aAAa,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA,CAC/B;EAAA;AAAA;AAAA,SAEcY,IAAI;EAAA;AAAA;AAAA;EAAA,mEAAnB,kBAAoBZ,aAAqB,EAAEC,eAAsB;IAAA;IAAA;MAAA;QAAA;UAAA;UAAA,OAC1CF,cAAc,CAACC,aAAa,EAACC,eAAe,CAAC;QAAA;UAA5DY,MAAM;UACZH,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA,CACrB;EAAA;AAAA;AAEDD,IAAI,CAAC,oBAAoB,EAAC,aAAa,CAAC;;AAGxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}